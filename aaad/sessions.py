from flask_login import LoginManager, UserMixin
from flask import Request
import ast
import os
from itsdangerous import URLSafeTimedSerializer

from authorizers import FileAuthorizer
from authenticators import FileAuthenticator

'''
References:
    * https://flask-login.readthedocs.io/en/latest/
    * http://thecircuitnerd.com/flask-login-tokens/
    * http://flask-security.readthedocs.io/en/latest/features.html
'''

# secret key used for the session user cookie
cookie_secret_key = os.environ['COOKIE_SECRET_KEY']
session_timeout_seconds = int(os.getenv('SESSION_TIMEOUT_SECONDS', 120))
session_max_age_seconds = int(os.getenv('SESSION_MAXAGE_SECONDS', 604800))

login_manager = LoginManager()

#Login_serializer used to encryt and decrypt the cookie token for the remember me option of flask-login
login_serializer = URLSafeTimedSerializer(cookie_secret_key)

class SessionUser(UserMixin):
    def __init__(self, username, actas, userpasshash):
        ''' Note that the userpasshash can be some kind of a token too.'''
        self.user_id = [ username, actas ]
        self.userpasshash = userpasshash

    def get_auth_token(self):
        ''' Encode a secure token for cookie. This is used to remember the user. '''
        return login_serializer.dumps(self.user_id, self.userpasshash)

    def get_id(self):
        return self.user_id

    def get_username(self):
        return self.user_id[0]

    def get_actas(self):
        return self.user_id[1]

    @staticmethod
    def get(user_id):
        '''
        Static method do determine if user_id is valid.
        Returns a SessionUser object if valid and None if not (as required be Flask-Login).
        '''
        print user_id
        # find the act_as_user from cookie or headers
        if FileAuthorizer().instance.is_user_valid(user_id[0]):
            userpasshash = FileAuthenticator().instance.get_hash(user_id[0])
            if userpasshash:
                return SessionUser(user_id[0], user_id[1], userpasshash)
        return None

@login_manager.user_loader
def load_user(user_id):
    '''
    This callback is used to reload the user object from the user ID stored in the session.
    It should take the unicode ID of a user, and return the corresponding user object.
    '''
    return SessionUser.get(user_id)

@login_manager.token_loader
def load_token(token):
    '''
    Flask-Login token_loader callback.
    The token_loader function asks this function to take the token that was
    stored on the users computer process it to check if its valid and then
    return a User Object if its valid or None if its not valid.
    '''

    #The Token itself was generated by User.get_auth_token (see above).
    max_age = session_timeout_seconds
    #Decrypt the Security Token, data = [username, hashpass]
    data = login_serializer.loads(token, max_age=session_timeout_seconds)

    #Find the User
    user = SessionUser.get(data[0])

    #Check userpasshash and return user or None
    if user and data[1] == user.userpasshash:
        return user
    return None
