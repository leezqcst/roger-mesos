{%- raw -%}
# Template rendered at {{ getTime }}
global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL).
        # ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# Template Customization
frontend http-in
        bind *:80

        acl host_mesos hdr_beg(host) -i mesos.
        use_backend mesos if host_mesos

        acl host_marathon hdr_beg(host) -i marathon.
        use_backend marathon if host_marathon

        acl host_chronos hdr_beg(host) -i chronos.
        use_backend chronos if host_chronos
        {{ $acls := .Acls }}{{ $backendrules := .BackendRules }}{{ $services := .Services }}{{ range $index, $app := .Apps }} {{ if hasKey $services $app.Id }} {{ $service := getService $services $app.Id }}
        acl {{ $app.EscapedId }}-aclrule {{ $service.Acl}}
        use_backend {{ $app.EscapedId }}-cluster if {{ $app.EscapedId }}-aclrule
        {{ else }}{{ $backendname := print $app.EscapedId "-cluster" }}{{ if $app.Env.HTTP_PREFIX }}{{ $aclprefix := escapeSlashes $app.Env.HTTP_PREFIX }}{{ $aclname := print $aclprefix "-aclrule" }}
        {{ addAcl $acls (print $aclname " path_beg -i " $app.Env.HTTP_PREFIX) }}#acl {{ $aclname }} path_beg -i {{ $app.Env.HTTP_PREFIX }}
        {{ addBackendRule $backendrules $backendname $aclname }}#use_backend {{ $backendname }} if {{ $aclname }}
        {{ if and $app.Env.ENABLE_AFFINITY (not $app.Env.ENABLE_SESSION_AFFINITY) }}{{ $versionhash := getHash $app.EscapedId }}
        {{ addAcl $acls (print $aclname "-" $versionhash " hdr_reg(Cookie) VERSIONID=" $versionhash) }}#acl {{ $aclname }}-{{ $versionhash }} hdr_reg(Cookie) VERSIONID={{ $versionhash }}
        {{ addBackendRule $backendrules (print $backendname "-" $versionhash) (print $aclname " " $aclname "-" $versionhash) }}#use_backend {{ $backendname }}-{{ $versionhash }} if {{ $aclname }} {{ $aclname }}-{{ $versionhash }}
        {{ end }}{{ else }}{{ $aclname := print $app.EscapedId "-aclrule" }}
        {{ addAcl $acls (print $aclname " path_beg -i " $app.Id) }}#acl {{ $aclname }} path_beg -i {{ $app.Id }}
        {{ addBackendRule $backendrules $backendname $aclname }}#use_backend {{ $backendname }} if {{ $aclname }}
        {{ if and $app.Env.ENABLE_AFFINITY (not $app.Env.ENABLE_SESSION_AFFINITY) }}{{ $versionhash := getHash $app.EscapedId }}
        {{ addAcl $acls (print $aclname "-" $versionhash " hdr_reg(Cookie) VERSIONID=" $versionhash) }}#acl {{ $aclname }}-{{ $versionhash }} hdr_reg(Cookie) VERSIONID={{ $versionhash }}
        {{ addBackendRule $backendrules (print $backendname "-" $versionhash) (print $aclname " " $aclname "-" $versionhash) }}#use_backend {{ $backendname }}-{{ $versionhash }} if {{ $aclname }} {{ $aclname }}-{{ $versionhash }}
        {{ end }}{{ end }}{{ end }} {{ end }}
        # acls{{ range $acl, $v := $acls }}
        acl {{ $acl }}{{ end }}

        # backend usage rules {{ range $aclrule := getConditionsDescending $backendrules }}
        use_backend {{ index $backendrules $aclrule }} if {{ $aclrule }}{{ end }}

        stats enable
        # CHANGE: Your stats credentials
        stats auth admin:admin
        stats uri /haproxy_stats

{{ range $index, $app := .Apps }}# Begin Backend section for {{ $app.EscapedId }}
# Begin Tcp ports for {{ $app.EscapedId }} {{ range $external_port, $task_port := $app.TcpPorts }}
listen {{ $app.EscapedId }}-cluster-tcp-{{ $external_port }} :{{ $external_port }}
        mode tcp
        option tcplog
        balance roundrobin
        {{ range $page, $task := $app.Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $external_port }} {{ $task.Host }}:{{ getTaskPort $task.Ports $task_port }} {{ end }} {{ end }}
# End Tcp ports for {{ $app.EscapedId }}

backend {{ $app.EscapedId }}-cluster{{ if $app.HealthCheckPath }}
        option httpchk GET {{ $app.HealthCheckPath }}
        {{ end }}
        balance leastconn
        option httpclose
        option forwardfor
        {{ if $app.Env.ENABLE_SESSION_AFFINITY }}
        cookie SERVERID insert indirect nocache
        {{ else if $app.Env.ENABLE_AFFINITY }}{{ $versionhash := getHash $app.EscapedId }}
        http-response add-header Set-Cookie VERSIONID={{ $versionhash }}
        {{ end }}
        # reqrep ^([^\ ]*\ ){{ $app.Id }}\/?(.*) \1\\/\2{{ if $app.Env.HTTP_PORT }} {{ range $page, $task := .Tasks }}
        {{ if $app.Env.ENABLE_SESSION_AFFINITY }}{{ $serverhash := getServerHash $app.EscapedId $task.Host $task.Port }}
        server {{ $serverhash }} {{ $task.Host }}:{{ $task.Port }} check cookie {{ $serverhash }}{{ if $app.HealthCheckPath }} check{{ end }}
        {{ else }}server {{ $app.EscapedId}}-{{ $task.Host }}-{{ getTaskPort $task.Ports $app.Env.HTTP_PORT }} {{ $task.Host }}:{{ getTaskPort $task.Ports $app.Env.HTTP_PORT }}{{ if $app.HealthCheckPath }} check{{ end }}
        {{ end }}{{ end }}{{ end }}{{ if and $app.Env.ENABLE_AFFINITY (not $app.Env.ENABLE_SESSION_AFFINITY) }}{{ $versionhash := getHash $app.EscapedId }}
# Version specific backend - {{ $versionhash }} ({{ $app.Env.ENABLE_AFFINITY }})
backend {{ $app.EscapedId }}-cluster-{{ $versionhash }}{{ if $app.HealthCheckPath }}
        option httpchk GET {{ $app.HealthCheckPath }}
        {{ end }}
        balance leastconn
        option httpclose
        option forwardfor

        http-response add-header Set-Cookie VERSIONID={{ $versionhash }}

        # reqrep ^([^\ ]*\ ){{ $app.Id }}\/?(.*) \1\\/\2{{ if $app.Env.HTTP_PORT }} {{ range $page, $task := .Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ getTaskPort $task.Ports $app.Env.HTTP_PORT }} {{ $task.Host }}:{{ getTaskPort $task.Ports $app.Env.HTTP_PORT }}{{ if $app.HealthCheckPath }} check{{ end }}
        {{ end }}{{ end }}{{ end }}
# End Backend section for {{ $app.EscapedId }} {{ end }}

{% endraw %}
# Begin Backend section for masters
backend mesos
        mode http
        balance roundrobin
        option httpclose
        option forwardfor
        option httpchk /master/state.json
        http-check expect string elected_time
        timeout check 10s
        {% for host in groups['masters'] -%}
        server {{ host }}-5050 {{ host }}:5050 check inter 10s fall 1 rise 3
        {% endfor %}

backend marathon
        mode http
        balance roundrobin
        option httpclose
        option forwardfor
        option httpchk {% if nginx_auth_enable is defined and nginx_auth_enable|bool %}/marathon{% endif %}/ping
        timeout check 10s
{% if nginx_auth_enable is defined and nginx_auth_enable|bool %}        reqirep ^([^\ :]*)\ /(.*)     \1\ /marathon/\2
{% endif %}
        {% for host in groups['marathon_servers'] -%}
        server {% if nginx_auth_enable is defined and nginx_auth_enable|bool %}{{ host }}-4080 {{ host }}:4080{% else %}{{ host }}-8080 {{ host }}:8080{% endif %} check inter 10s fall 1 rise 3
        {% endfor %}

backend chronos
        mode http
        balance roundrobin
        option httpclose
        option forwardfor
        option httpchk {% if nginx_auth_enable is defined and nginx_auth_enable|bool %}/chronos{% endif %}/ping
        timeout check 10s
{% if nginx_auth_enable is defined and nginx_auth_enable|bool %}        reqirep ^([^\ :]*)\ /(.*)     \1\ /chronos/\2
{% endif %}
        {% for host in groups['chronos_servers'] -%}
        server {% if nginx_auth_enable is defined and nginx_auth_enable|bool %}{{ host }}-4080 {{ host }}:4080{% else %}{{ host }}-4400 {{ host }}:4400{% endif %} check inter 10s fall 1 rise 3
        {% endfor %}
# End Backend section for masters
{% raw %}

##
## map service ports of marathon apps
## ( see https://mesosphere.github.io/marathon/docs/service-discovery-load-balancing.html#ports-assignment ))
## to haproxy frontend port
##
## {{ range $index, $app := .Apps }}
## listen {{ $app.EscapedId }}_{{ $app.ServicePort }}
##   bind *:{{ $app.ServicePort }}
##   mode http
##   {{ if $app.HealthCheckPath }}
##   # option httpchk GET {{ $app.HealthCheckPath }}
##   {{ end }}
##   balance leastconn
##   option forwardfor
##         {{ range $page, $task := .Tasks }}
##         server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }} {{ end }}
## {{ end }}
{%- endraw -%}
